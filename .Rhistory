}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
summary(t.test(x, mu = 0.1, alternative = "greater"))
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
names(t.test(x, mu = 0.1, alternative = "greater"))
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
(t.test(x, mu = 0.1, alternative = "greater"))$alternative
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test("er", "greater",0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test("er", "er",0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater","greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- rbinom(1000, size = 10, prob = 0.5)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
devtools::document()
devtools::check()
library(STAT302package)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (less)
my_t.test(demonstration_data, "less", 60)
# Demonstrate a test of the hypothesis (greater)
my_t.test(demonstration_data, "greater", 60)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::document()
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302package)
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package, build_vignette = TRUE, build_opts = c())
library(STAT302package)
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::check()
help(package = "STAT302package", help_type = "html")
library(STAT302package)
help(package = "STAT302package", help_type = "html")
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package, build_vignette = TRUE, build_opts = c())
devtools::document()
library(STAT302package)
#' @param temp_F Numeric input indicating temperature in Fahrenheit.
#' @keywords temperature
#'
#' @return Numeric indicating temperature \code{temp_F} converted to Celsius.
#'
#' @examples
#' f_to_c(32)
#' f_to_c(212)
#'
#' @export
f_to_c <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
#' # life expectancy and what was the drop?
#' my_gapminder %>%
#'   group_by(continent, country) %>%
#'   select(country, year, continent, lifeExp) %>%
#'   mutate(le_delta = lifeExp - lag(lifeExp)) %>%
#'   summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
#'   filter(min_rank(worst_le_delta) < 2) %>%
#'   arrange(worst_le_delta)
#' }
#'
"my_gapminder"
#' @param k_cv Integer representing the number of folds.
#'
#' @return a list with objects: class of speciese and CV error
#' @keywords \code{prediction}
#'
#' @examples
#' train <- na.omit(my_penguins)
#' my_knn_cv(5, train[,3:6],train[[1]], 1)
#'
#' @export
my_knn_cv <- function(k_cv, train, cl, k_nn) {
# randomly assign observations to the training data and test data
folds <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame("x" = train, "y" = cl, "split" = folds)
# make an empty list that stores the misclassfication error for each fold
error_list = rep(NA, k_cv)
# split training data and test data based on i
if (require("dplyr","class")) {
for (i in 1:k_cv) {
data_train <- data %>% filter(split != i)
data_test <- data %>% filter(split == i)
cl_test <- as.numeric(data_test$y)
pred <- knn(data_train[,1:4], data_test[,1:4], as.factor(data_train$y), k=k_nn)
# record the misclassfication rate for each fold
error_list[i] <- mean(data_test$y != pred)
}
# record the average of all misclassfication rate
cv_err <- mean(error_list)
# predict the class by using the full data
class <- knn(train, train, as.factor(data$y), k=k_nn)
return(list("class"= class,"cv_err" = cv_err))
}
}
#' @param formula Formula class object.
#' @param data Input data frame.
#'
#' @return a table with four columns, estimates, std_error, t_stat, and p_value.
#' @keywords \code{inference}
#'
#' @examples
#' my_lm(lm(formula = mpg ~ hp * wt, data = mtcars), mtcars)
#'
#' @export
my_lm <- function(formula, data) {
X <- model.matrix(formula, data)
Y <- model.response(model.frame(formula, data))
# calculate the estimates for coefficients
estimate <- solve((t(X) %*% X)) %*% (t(X) %*% Y)
# calculate standard errors
df = nrow(data) - ncol(X)
sample_var = sum((Y - X %*% estimate) ^ 2 / df)
std_error <- sqrt(diag(sample_var * solve(t(X) %*% X)))
# calculate t statistic
t_stat <- estimate / std_error
# calculate p values
p_value <- 2 * pt(abs(t_stat), df, lower.tail = FALSE)
# create the matrix contained the output
result <- matrix(NA, nrow = ncol(X), ncol = 4)
result[, 1] <- estimate
result[, 2] <- std_error
result[, 3] <- t_stat
result[, 4] <- p_value
colnames(result) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
for (i in 1:ncol(X)) {
rownames(result) <- colnames(X)
}
return(result)
}
#'   \item{bill_depth_mm}{a number denoting bill depth (millimeters)}
#'   \item{flipper_length_mm}{an integer denoting flipper length (millimeters)}
#'   \item{body_mass_g}{an integer denoting body mass (grams)}
#'   \item{sex}{a factor denoting penguin sex (female, male)}
#'   \item{year}{an integer denoting the study year (2007, 2008, or 2009)}
#' }
#' @source {Adélie penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Adélie penguins (Pygoscelis adeliae) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 5. Environmental Data Initiative} \url{https://doi.org/10.6073/pasta/98b16d7d563f265cb52372c8ca99e60f}
#' @source {Gentoo penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Gentoo penguin (Pygoscelis papua) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 5. Environmental Data Initiative} \url{https://doi.org/10.6073/pasta/7fca67fb28d56ee2ffa3d9370ebda689}
#' @source {Chinstrap penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Chinstrap penguin (Pygoscelis antarcticus) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 6. Environmental Data Initiative} \url{https://doi.org/10.6073/pasta/c14dfcfada8ea13a17536e73eb6fbe9e}
#' @source {Originally published in: Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3): e90081. doi:10.1371/journal.pone.0090081}
"my_penguins"
#' @param power Numeric input for the power that \code{x} will be raised to,
#'   defaults to \code{2}.
#'
#' @return Numeric representing \code{x} raised to the power of \code{power}.
#'
#' @examples
#' my_pow(4)
#' my_pow(4, power = 3)
#'
#' @export
my_pow <- function(x, power = 2) {
return(x^power)
}
#'
#' @return A list with four elements, test_stat, df, alternative, and p_value.
#' @keywords \code{inference}
#'
#' @examples
#' my_t.test(rbinom(100, size = 7, prob = 0.1), "greater", 0.9)
#' my_t.test(rbinom(100, size = 7, prob = 0.1), "less", 0.9)
#' my_t.test(rbinom(100, size = 7, prob = 0.1), "two.sided", 0.9)
#'
#' @export
my_t.test <- function(x, alternative, mu) {
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302package)
devtools::document()
devtools::check()
devtools::install_github("eunicezh/STAT302package")
devtools::check()
usethis::use_package("dplyr")
devtools::document()
rm(list = c("f_to_c", "my_knn_cv", "my_lm", "my_pow", "my_t.test"))
devtools::document()
devtools::document()
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::document()
library(STAT302package)
devtools::document()
devtools::check()
