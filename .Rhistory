t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- rbinom(100,7,0.1)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(5,6,7,8)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
name(t.test(x, mu = 0.1, alternative = "greater"))
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
summary(t.test(x, mu = 0.1, alternative = "greater"))
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
names(t.test(x, mu = 0.1, alternative = "greater"))
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
(t.test(x, mu = 0.1, alternative = "greater"))$alternative
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test("er", "greater",0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test("er", "er",0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- c(10,20)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater","greater")
# Function: my_t.test, performs a one sample t-test
# Input:
# x, a numeric vector of data;
# alternative, a character string specifying the alternative hypothesis;
# mu, a number indicating the null hypothesis value of the mean
# Output: a list with four elements, test_stat, df, alternative, and p_value
my_t.test <- function(x, alternative, mu) {
# calculate the different values
estimate <- mean(x)
df <- length(x) - 1
se <- sd(x) / sqrt(length(x))
t_obs <- (estimate - mu) / se
# return the output based on different alternative hypothesis
if (alternative == "less") {
p_value <- pt(t_obs, df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_value <- pt(t_obs, df, lower.tail = FALSE)
} else {
p_value <- 2 * pt(abs(t_obs), df, lower.tail = FALSE)
}
result <- list("test_stat" = t_obs,
"df" = df,
"alternative" = alternative,
"p_val" = p_value)
return(result)
}
# check the function with t.test() function implemented in R
# data
set.seed(123)
x <- rbinom(1000, size = 10, prob = 0.5)
# result returned by my_t.test()
#my_t.test(x, "less", 0.9)
#my_t.test(x, "two.sided", 0.9)
my_t.test(x, "greater", 0.1)
# result returned by t.test()
#t.test(x, mu = 0.9, alternative = "less")
#t.test(x, mu = 0.9, alternative = "two.sided")
t.test(x, mu = 0.1, alternative = "greater")
devtools::document()
devtools::check()
library(STAT302package)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (less)
my_t.test(demonstration_data, "less", 60)
# Demonstrate a test of the hypothesis (greater)
my_t.test(demonstration_data, "greater", 60)
# Demonstrate a test of the hypothesis (Two-Sided)
demonstration_data <- my_gapminder$lifeExp
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
devtools::install_github("eunicezh/STAT302package", build_vignette = TRUE, build_opts = c())
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::document()
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302package)
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
utils::browseVignettes(package = "STAT302package")
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package, build_vignette = TRUE, build_opts = c())
library(STAT302package)
library(STAT302package)
utils::browseVignettes(package = "STAT302package")
devtools::check()
help(package = "STAT302package", help_type = "html")
library(STAT302package)
help(package = "STAT302package", help_type = "html")
utils::browseVignettes(package = "STAT302package")
devtools::install_github("eunicezh/STAT302package, build_vignette = TRUE, build_opts = c())
devtools::document()
