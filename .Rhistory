MSE_2
#Calculate CV estimated MSE when k = 5
MSE_5 <- data.frame()
for(i in 1:30) {
result_5 <- my_rf_cv(k = 5)
MSE_5[i,1] <- unlist(result_5)
}
colnames(MSE_5) <- c("MSE")
rownames(MSE_5) <- seq(1,30)
MSE_5
#Calculate CV estimated MSE when k = 10
MSE_10 <- data.frame()
for(i in 1:30) {
result_10 <- my_rf_cv(k = 10)
MSE_10[i,1] <- unlist(result_10)
}
colnames(MSE_10) <- c("MSE")
rownames(MSE_10) <- seq(1,30)
MSE_10
# boxplot whenk  k= 2
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_table <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_table, folds)
ggplot(data = df,
aes(
x = unlist(folds),
y = unlist(all_table),
group = unlist(folds),
fill = folds
)) +
geom_boxplot() +
xlab("folds") +
ylab("MSE") +
labs("Misclassification Errors with different number of folds") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(
angle = 45,
hjust = 1,
vjust = 1
),
panel.spacing.x = unit(0.75, "cm")
) +
scale_fill_brewer(
type = "seq",
palette = 1,
direction = 1,
aesthetics = "fill"
)
# plot the boxplot when k= 2, 5, and 10
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_k <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_k, folds)
ggplot(data = df,aes(x = unlist(folds),y = unlist(all_k),group = unlist(folds),fill = folds)) +
geom_boxplot() +
xlab("folds") +
ylab("MSE") +
labs("Misclassification Errors with different number of folds") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# plot the boxplot when k= 2, 5, and 10
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_k <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_k, folds)
ggplot(data = df,aes(x = unlist(folds),y = unlist(all_k),group = unlist(folds),fill = folds)) +
geom_boxplot() +
theme_bw() +
labs(x = "Folds", y = "MSE", title = "CV estimated MSE")
theme(plot.title = element_text(hjust = 0.5))
# plot the boxplot when k= 2, 5, and 10
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_k <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_k, folds)
ggplot(data = df,aes(x = unlist(folds),y = unlist(all_k),group = unlist(folds),fill = folds)) +
geom_boxplot() +
theme_bw() +
labs(x = "Folds", y = "MSE", title = "CV estimated MSE with k=2,5,10")
theme(plot.title = element_text(hjust = 0.5))
average_cverr_2 <- mean(as.numeric(MSE_2[,1]))
sd_cverr_2 <- sd(as.numeric(MSE_2[,1]))
average_cverr_5 <- mean(as.numeric(MSE_5[,1]))
sd_cverr_5 <- sd(as.numeric(MSE_5[,1]))
average_cverr_10 <- mean(as.numeric(MSE_10[,1]))
sd_cverr_10 <- sd(as.numeric(MSE_10[,1]))
row_1 <- cbind(average_cverr_2, sd_cverr_2)
row_2 <- cbind(average_cverr_5, sd_cverr_5)
row_3 <- cbind(average_cverr_10, sd_cverr_10)
cv_table <- rbind(row_1, row_2, row_3)
rownames(cv_table) <- c("k = 2", "k = 5", "k = 10")
colnames(cv_table) <- c("average", "sd")
cv_table
average_cverr <- mean(as.numeric(MSE_2[,1]))
sd_cverr_2 <- sd(as.numeric(MSE_2[,1]))
average_cverr_5 <- mean(as.numeric(MSE_5[,1]))
sd_cverr_5 <- sd(as.numeric(MSE_5[,1]))
average_cverr_10 <- mean(as.numeric(MSE_10[,1]))
sd_cverr_10 <- sd(as.numeric(MSE_10[,1]))
row_1 <- cbind(average_cverr_2, sd_cverr_2)
row_2 <- cbind(average_cverr_5, sd_cverr_5)
row_3 <- cbind(average_cverr_10, sd_cverr_10)
cv_table <- rbind(row_1, row_2, row_3)
rownames(cv_table) <- c("k = 2", "k = 5", "k = 10")
colnames(cv_table) <- c("average", "sd")
cv_table
k_table <- data.frame("k value" = c(2, 5, 10))
k_table
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg_10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
k_table <- data.frame("k value" = c(2, 5, 10), "Average" = c())
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg_10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
k_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10))
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
k_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg_10))
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
k_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10))
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
k_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10))
k_table
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
cv_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10))
cv_table
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
cv_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10), "Standard Deviation" = c(sd2,sd5,sd10))
cv_table
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302package)
library(dplyr)
library(tidyr)
library(ggplot2)
library(randomForest)
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
# create the formula used for my_lm
demo_regression <- lm(formula = demonstration_data ~ my_gapminder$gdpPercap + my_gapminder$continent, data = my_gapminder)
demo_regression
# demonstrate the linear regression
output_regression <- my_lm(demo_regression, data = my_gapminder)
output_regression
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
est_gdp
# calculate y-hat
beta <- as.matrix(output_regression[,1])
alpha <- model.matrix(demonstration_data ~ my_gapminder$gdpPercap + my_gapminder$continent, data = my_gapminder)
y_hat <- alpha %*% beta
# plot the graph
continent <- my_gapminder$continent
my_df <- data.frame(actual = my_gapminder$lifeExp, fitted = y_hat)
ggplot(my_df, aes(x = fitted, y = actual, color = continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, col = "red", lty = 2) +
theme_bw(base_size = 15) +
labs(x = "Fitted values", y = "Actual values", title = "Actual vs. Fitted") +
theme(plot.title = element_text(hjust = 0.5))
# compute the cv and train error
set.seed(121)
my_penguins <- na.omit(my_penguins)
cv_result_list <- rep(NA,10)
train_result_list <- rep(NA,10)
for (i in 1:10) {
cv_result <- my_knn_cv(5, my_penguins[,3:6],my_penguins[[1]], i)
cv_result_list[i] <- cv_result[[2]]
train_result <-sum(as.numeric(my_penguins$species != cv_result[[1]])) / nrow(my_penguins)
train_result_list[i] <- train_result
}
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = cv_result_list, "Training Error" = train_result_list)
rownames(err_table) <- c(1:10)
err_table
# compute CV estimated MSE when k = 2
MSE_2 <- data.frame()
for(i in 1:30) {
result_2 <- my_rf_cv(k = 2)
MSE_2[i,1] <- unlist(result_2)
}
colnames(MSE_2) <- c("MSE")
rownames(MSE_2) <- seq(1,30)
MSE_2
#Calculate CV estimated MSE when k = 5
MSE_5 <- data.frame()
for(i in 1:30) {
result_5 <- my_rf_cv(k = 5)
MSE_5[i,1] <- unlist(result_5)
}
colnames(MSE_5) <- c("MSE")
rownames(MSE_5) <- seq(1,30)
MSE_5
#Calculate CV estimated MSE when k = 10
MSE_10 <- data.frame()
for(i in 1:30) {
result_10 <- my_rf_cv(k = 10)
MSE_10[i,1] <- unlist(result_10)
}
colnames(MSE_10) <- c("MSE")
rownames(MSE_10) <- seq(1,30)
MSE_10
# plot the boxplot when k= 2, 5, and 10
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_k <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_k, folds)
ggplot(data = df,aes(x = unlist(folds),y = unlist(all_k),group = unlist(folds),fill = folds)) +
geom_boxplot() +
theme_bw() +
labs(x = "Folds", y = "MSE", title = "CV estimated MSE with k=2,5,10")
theme(plot.title = element_text(hjust = 0.5))
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
cv_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10), "Standard Deviation" = c(sd2,sd5,sd10))
cv_table
library(STAT302package)
library(dplyr)
library(tidyr)
library(ggplot2)
library(randomForest)
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
test_result <- data.frame("two sides" = result_ts$p_val, "less" = result_less$p_val, "greater" = result_greater$p_val, "alpha" = alpha )
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
result_ts$p_val
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
result_less$p_val
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
result_greater$p_val
test_result <- data.frame("two sides" = result_ts$p_val, "less" = result_less$p_val, "greater" = result_greater$p_val, "alpha" = alpha )
test_result
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
test_result <- data.frame("two sides" = result_ts$p_val, "less" = result_less$p_val, "greater" = result_greater$p_val, "alpha" = alpha )
rownames(test_result) <- "p value"
# extract the data
demonstration_data <- my_gapminder$lifeExp
# p_value cut-off of alpha
alpha = 0.05
# Demonstrate a test of the hypothesis (Two-Sided)
result_ts <- my_t.test(demonstration_data, "two.sides", 60)
# Demonstrate a test of the hypothesis (less)
result_less <- my_t.test(demonstration_data, "less", 60)
# Demonstrate a test of the hypothesis (greater)
result_greater <- my_t.test(demonstration_data, "greater", 60)
test_result <- data.frame("two sides" = result_ts$p_val, "less" = result_less$p_val, "greater" = result_greater$p_val, "alpha" = alpha )
rownames(test_result) <- "p value"
test_result
# create the formula used for my_lm
demo_regression <- lm(formula = demonstration_data ~ my_gapminder$gdpPercap + my_gapminder$continent, data = my_gapminder)
demo_regression
# demonstrate the linear regression
output_regression <- my_lm(demo_regression, data = my_gapminder)
output_regression
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
est_gdp
# create the formula used for my_lm
demo_regression <- lm(formula = demonstration_data ~ my_gapminder$gdpPercap + my_gapminder$continent, data = my_gapminder)
demo_regression
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
est_gdp
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
est_gdp
test_result2 <- data.frame("two sides" = est_gdp, "alpha" = alpha )
rownames(test_result) <- "p value"
test_result2
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
test_result2 <- data.frame("two sides" = est_gdp, "alpha" = alpha )
rownames(test_result) <- "p value"
test_result2
# extract the estimates for gdpPercap
est_gdp <- output_regression[2,4]
test_result2 <- data.frame("two sides" = est_gdp, "alpha" = alpha )
rownames(test_result2) <- "p value"
test_result2
# calculate y-hat
beta <- as.matrix(output_regression[,1])
alpha <- model.matrix(demonstration_data ~ my_gapminder$gdpPercap + my_gapminder$continent, data = my_gapminder)
y_hat <- alpha %*% beta
# plot the graph
continent <- my_gapminder$continent
my_df <- data.frame(actual = my_gapminder$lifeExp, fitted = y_hat)
ggplot(my_df, aes(x = fitted, y = actual, color = continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, col = "red", lty = 2) +
theme_bw(base_size = 15) +
labs(x = "Fitted values", y = "Actual values", title = "Actual vs. Fitted") +
theme(plot.title = element_text(hjust = 0.5))
# demonstrate the linear regression
output_regression <- my_lm(demo_regression, data = my_gapminder)
output_regression
# compute the cv and train error
set.seed(121)
my_penguins <- na.omit(my_penguins)
cv_result_list <- rep(NA,10)
train_result_list <- rep(NA,10)
for (i in 1:10) {
cv_result <- my_knn_cv(5, my_penguins[,3:6],my_penguins[[1]], i)
cv_result_list[i] <- cv_result[[2]]
train_result <-sum(as.numeric(my_penguins$species != cv_result[[1]])) / nrow(my_penguins)
train_result_list[i] <- train_result
}
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = cv_result_list, "Training Error" = train_result_list)
rownames(err_table) <- c(1:10)
err_table
# compute the result when k=1 or K=5
set.seed(121)
penguins <- na.omit(penguins)
result1 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 1)
result2 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 10)
# calculate the training error
train_err1 <- sum(as.numeric(penguins$species != result1[[1]])) / nrow(penguins)
train_err2 <- sum(as.numeric(penguins$species != result2[[1]])) / nrow(penguins)
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = c(result1[[2]],result2[[2]]), "Training Error" = c(train_err1, train_err2))
rownames(err_table) <- c("K=1", "K=5")
err_table
result2[[1]]
# compute the result when k=1 or K=5
set.seed(121)
penguins <- na.omit(penguins)
result1 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 1)
result2 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 5)
# calculate the training error
train_err1 <- sum(as.numeric(penguins$species != result1[[1]])) / nrow(penguins)
train_err2 <- sum(as.numeric(penguins$species != result2[[1]])) / nrow(penguins)
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = c(result1[[2]],result2[[2]]), "Training Error" = c(train_err1, train_err2))
rownames(err_table) <- c("K=1", "K=5")
err_table
result2[[1]]
# compute the result when k=1 or K=5
set.seed(121)
penguins <- na.omit(penguins)
result1 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 1)
result2 <- my_knn_cv(5, penguins[,3:6],penguins[[1]], 5)
# calculate the training error
train_err1 <- sum(as.numeric(penguins$species != result1[[1]])) / nrow(penguins)
train_err2 <- sum(as.numeric(penguins$species != result2[[1]])) / nrow(penguins)
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = c(result1[[2]],result2[[2]]), "Training Error" = c(train_err1, train_err2))
rownames(err_table) <- c("K=1", "K=5")
err_table
# compute the cv and train error
set.seed(121)
my_penguins <- na.omit(my_penguins)
cv_result_list <- rep(NA,10)
train_result_list <- rep(NA,10)
for (i in 1:10) {
cv_result <- my_knn_cv(5, my_penguins[,3:6],my_penguins[[1]], i)
cv_result_list[i] <- cv_result[[2]]
train_result <-sum(as.numeric(my_penguins$species != cv_result[[1]])) / nrow(my_penguins)
train_result_list[i] <- train_result
}
# Make a table composed of CV error and Training Error
err_table <- data.frame("CV Error" = cv_result_list, "Training Error" = train_result_list)
rownames(err_table) <- c(1:10)
err_table
# compute CV estimated MSE when k = 2
MSE_2 <- data.frame()
for(i in 1:30) {
result_2 <- my_rf_cv(k = 2)
MSE_2[i,1] <- unlist(result_2)
}
colnames(MSE_2) <- c("MSE")
rownames(MSE_2) <- seq(1,30)
MSE_2
#Calculate CV estimated MSE when k = 5
MSE_5 <- data.frame()
for(i in 1:30) {
result_5 <- my_rf_cv(k = 5)
MSE_5[i,1] <- unlist(result_5)
}
colnames(MSE_5) <- c("MSE")
rownames(MSE_5) <- seq(1,30)
MSE_5
#Calculate CV estimated MSE when k = 10
MSE_10 <- data.frame()
for(i in 1:30) {
result_10 <- my_rf_cv(k = 10)
MSE_10[i,1] <- unlist(result_10)
}
colnames(MSE_10) <- c("MSE")
rownames(MSE_10) <- seq(1,30)
MSE_10
# plot the boxplot when k= 2, 5, and 10
folds <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_k <- rbind(MSE_2, MSE_5, MSE_10)
df <- data.frame(all_k, folds)
ggplot(data = df,aes(x = unlist(folds),y = unlist(all_k),group = unlist(folds),fill = folds)) +
geom_boxplot() +
theme_bw() +
labs(x = "Folds", y = "MSE", title = "CV estimated MSE with k=2,5,10")
theme(plot.title = element_text(hjust = 0.5))
# calculate the average of CV estimates
avg2 <- mean(as.numeric(MSE_2[,1]))
avg5 <- mean(as.numeric(MSE_5[,1]))
avg10 <- mean(as.numeric(MSE_10[,1]))
# calculate the sd of CV estimates
sd2 <- sd(as.numeric(MSE_2[,1]))
sd5 <- sd(as.numeric(MSE_5[,1]))
sd10 <- sd(as.numeric(MSE_10[,1]))
cv_table <- data.frame("k value" = c(2, 5, 10), "Average" = c(avg2,avg5,avg10), "Standard Deviation" = c(sd2,sd5,sd10))
cv_table
devtools::document()
